name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get uv version from constraints
        id: uv-version
        run: |
          UV_VERSION=$(grep "^uv==" .github/workflows/constraints.txt | cut -d'=' -f3)
          echo "version=$UV_VERSION" >> $GITHUB_OUTPUT

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: ${{ steps.uv-version.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Install dependencies for version management
        run: |
          uv add --dev tomli-w

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "uv run python -c \"import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])\""

      - name: Bump version for developmental release
        if: (!steps.check-version.outputs.tag)
        run: |
          uv run python -c "
          import tomllib
          import tomli_w
          import time

          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)

          current_version = data['project']['version']
          version_parts = current_version.split('.')
          version_parts[-1] = str(int(version_parts[-1]) + 1)
          new_version = '.'.join(version_parts)
          dev_version = f'{new_version}.dev.{int(time.time())}'

          data['project']['version'] = dev_version

          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(data, f)
          "

      - name: Build package
        run: |
          uv build

      - name: Publish package on PyPI
        if: steps.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.12.4

      - name: Publish package on TestPyPI
        if: (!steps.check-version.outputs.tag)
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
