name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python: "3.10", os: "ubuntu-latest", session: "pre-commit" }
          - { python: "3.10", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.11", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.12", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.10", os: "ubuntu-latest", session: "tests" }
          - { python: "3.11", os: "ubuntu-latest", session: "tests" }
          - { python: "3.12", os: "ubuntu-latest", session: "tests" }
          - { python: "3.12", os: "windows-latest", session: "tests" }
          - { python: "3.12", os: "macos-latest", session: "tests" }
          - { python: "3.10", os: "ubuntu-latest", session: "typeguard" }
          - { python: "3.10", os: "ubuntu-latest", session: "xdoctest" }
          - { python: "3.10", os: "ubuntu-latest", session: "docs-build" }

    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5.1.1
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip
        run: |
          pip install -c ${{ github.workspace }}/.github/workflows/constraints.txt pip
          pip --version

      - name: Upgrade pip in virtual environments
        shell: python
        run: |
          import os
          import pip

          with open(os.environ["GITHUB_ENV"], mode="a") as io:
              print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

      - name: Install Poetry
        run: |
          pipx install --pip-args "-c ${{ github.workspace }}/.github/workflows/constraints.txt" poetry
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args "-c ${{ github.workspace }}/.github/workflows/constraints.txt" nox
          pipx inject --pip-args "-c ${{ github.workspace }}/.github/workflows/constraints.txt" nox nox-poetry
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import subprocess
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])
          cmd = f'echo "result={result}" >> $GITHUB_OUTPUT'
          subprocess.run(cmd, shell=True)

      - name: Restore pre-commit cache
        uses: actions/cache@v4
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      # Start debug timers
      - name: Start Step 1 Timer
        id: start_step_1
        run: |
          echo "Step 1 start time: $(date +%s)" >> $GITHUB_ENV
        shell: bash
        if: runner.os != 'Windows'
        
      - name: Start Step 1 Timer (Windows)
        id: start_step_1_windows
        run: |
          echo "Step 1 start time: $(Get-Date -UFormat %s)" >> $env:GITHUB_ENV
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Run Nox
        run: |
          nox --python=${{ matrix.python }}

      # Stop debug timers and calculate execution time
      - name: End Step 1 Timer
        id: end_step_1
        run: |
          echo "Step 1 end time: $(date +%s)" >> $GITHUB_ENV
        shell: bash
        if: runner.os != 'Windows'

      - name: End Step 1 Timer (Windows)
        id: end_step_1_windows
        run: |
          echo "Step 1 end time: $(Get-Date -UFormat %s)" >> $env:GITHUB_ENV
        shell: pwsh
        if: runner.os == 'Windows'
    
      - name: Calculate Step 1 Duration
        id: duration_step_1
        run: |
          step_start_time=$(echo "$STEP_1_START" | tr -d '\r')
          step_end_time=$(echo "$STEP_1_END" | tr -d '\r')
          duration=$((step_end_time - step_start_time))
          echo "Step 1 duration: ${duration} seconds"
        env:
          STEP_1_START: ${{ env.STEP_1_START }}
          STEP_1_END: ${{ env.STEP_1_END }}
        shell: bash
        if: runner.os != 'Windows'
    
      - name: Calculate Step 1 Duration (Windows)
        id: duration_step_1_windows
        run: |
          $step_start_time = $env:STEP_1_START -replace "`r"
          $step_end_time = $env:STEP_1_END -replace "`r"
          $duration = [int]($step_end_time) - [int]($step_start_time)
          echo "Step 1 duration: ${duration} seconds"
        env:
          STEP_1_START: ${{ env.STEP_1_START }}
          STEP_1_END: ${{ env.STEP_1_END }}
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: "actions/upload-artifact@v4"
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python }}
          path: ".coverage.*"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Python
        uses: actions/setup-python@v5.1.1
        with:
          python-version: "3.12"

      - name: Upgrade pip
        run: |
          pip install -c ${{ github.workspace }}/.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pipx install --pip-args "-c ${{ github.workspace }}/.github/workflows/constraints.txt" poetry
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args "-c ${{ github.workspace }}/.github/workflows/constraints.txt" nox
          pipx inject --pip-args "-c ${{ github.workspace }}/.github/workflows/constraints.txt" nox nox-poetry
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage data and display human readable report
        run: |
          nox --session=coverage

      - name: Create coverage report
        run: |
          nox --session=coverage -- xml

      # Need to fix coverage source paths for SonarCloud scanning in GitHub actions.
      # Replace root path with /github/workspace (mounted in docker container).
      - name: Override coverage source paths for SonarCloud
        run: |
          sed -i "s/<source><\/source>/<source>\/github\/workspace<\/source>/g" coverage.xml
          sed -i "s/<source>tests/<source>\/github\/workspace\/tests/g" coverage.xml

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # No need to run SonarCloud analysis if dependabot update or token not defined
        if: env.SONAR_TOKEN != '' && (github.actor != 'dependabot[bot]')
        uses: SonarSource/sonarcloud-github-action@v2.3.0
